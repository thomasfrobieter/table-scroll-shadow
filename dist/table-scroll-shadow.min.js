/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/table-scroll-shadow.scss":
/*!**************************************!*\
  !*** ./src/table-scroll-shadow.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"table-scroll-shadow.min.css\");\n\n//# sourceURL=webpack://table-scroll-shadow/./src/table-scroll-shadow.scss?");

/***/ }),

/***/ "./src/table-scroll-shadow.js":
/*!************************************!*\
  !*** ./src/table-scroll-shadow.js ***!
  \************************************/
/***/ (() => {

eval("(function () {\n  // Define the constructor\n  this.TableScrollShadow = function () {\n    // Define option defaults\n    let defaults = {\n      wrapperClass: \".table-wrapper\",\n      scrollAreaClass: \".table-scroll\",\n      throttleDelay: 75,\n      showButtons: false,\n      enableLongTextCellMinWidth: false,\n      longTextCellMinWidthCharacters: 80,\n      buttonElement: \"button\",\n      leftButtonClasses: [\"table-scroll-button\", \"table-scroll-button--left\"],\n      rightButtonClasses: [\"table-scroll-button\", \"table-scroll-button--right\"],\n      leftButtonLabel: \"Scroll left\",\n      rightButtonLabel: \"Scroll right\",\n    };\n\n    // Create options by extending defaults with the passed in arugments\n    if (arguments[0] && typeof arguments[0] === \"object\") {\n      this.options = extendDefaults(defaults, arguments[0]);\n    } else {\n      this.options = defaults;\n    }\n  };\n\n  // Public init method\n  TableScrollShadow.prototype.init = function () {\n    const tables = document.querySelectorAll(this.options.wrapperClass);\n    const checkForOverflow = new ResizeObserver(\n      throttle((entries) => {\n        for (let entry of entries) {\n          const tableWrapper = entry.target;\n          const scrollArea = tableWrapper.querySelector(\n            this.options.scrollAreaClass\n          );\n          const table = tableWrapper.querySelector(\"table\");\n          let tableHasOverflow = false;\n\n          // Override color css variable\n          if (this.options.shadowColor) {\n            tableWrapper.style.setProperty(\n              \"--table-shadow-color\",\n              this.options.shadowColor\n            );\n          }\n\n          // Override size css variable\n          if (this.options.shadowSize) {\n            tableWrapper.style.setProperty(\n              \"--table-shadow-size\",\n              this.options.shadowSize\n            );\n          }\n\n          if (table.clientWidth > scrollArea.clientWidth) {\n            // Handle overflow\n            tableHasOverflow = true;\n            tableWrapper.classList.add(\"has-overflow\");\n          } else {\n            tableHasOverflow = false;\n            tableWrapper.classList.remove(\n              \"has-overflow\",\n              \"has-shadow-left\",\n              \"has-shadow-right\"\n            );\n          }\n\n          // Add long text cell min width\n          if (this.options.enableLongTextCellMinWidth) {\n            const cells = table.querySelectorAll(\"td\");\n\n            cells.forEach((cell) => {\n              if (\n                cell.textContent.length >=\n                this.options.longTextCellMinWidthCharacters\n              ) {\n                cell.classList.add(\"long-text-cell\");\n              }\n            });\n          }\n\n          // Add horizontal shadows\n          if (tableHasOverflow) {\n            tableWrapper.classList.add(\"has-shadow-right\");\n\n            scrollArea.addEventListener(\"scroll\", () => {\n              let scrollSize = table.clientWidth - scrollArea.clientWidth;\n\n              if (scrollArea.scrollLeft === 0) {\n                tableWrapper.classList.add(\"has-shadow-right\");\n                tableWrapper.classList.remove(\"has-shadow-left\");\n              } else if (\n                scrollArea.scrollLeft > 0 &&\n                scrollArea.scrollLeft !== scrollSize\n              ) {\n                tableWrapper.classList.add(\n                  \"has-shadow-right\",\n                  \"has-shadow-left\"\n                );\n              } else if (scrollArea.scrollLeft === scrollSize) {\n                tableWrapper.classList.remove(\"has-shadow-right\");\n                tableWrapper.classList.add(\"has-shadow-left\");\n              }\n            });\n          }\n\n          // Add buttons to scroll left and right\n          if (this.options.showButtons) {\n            let leftButton = document.createElement(this.options.buttonElement);\n            let rightButton = document.createElement(\n              this.options.buttonElement\n            );\n\n            leftButton.classList.add(...this.options.leftButtonClasses);\n            rightButton.classList.add(...this.options.rightButtonClasses);\n\n            leftButton.textContent = this.options.leftButtonLabel;\n            rightButton.textContent = this.options.rightButtonLabel;\n\n            tableWrapper.appendChild(leftButton);\n            tableWrapper.appendChild(rightButton);\n\n            leftButton.addEventListener(\"click\", () => {\n              scrollArea.scrollLeft = 0;\n            });\n\n            rightButton.addEventListener(\"click\", () => {\n              scrollArea.scrollLeft = scrollArea.scrollWidth;\n            });\n          }\n        }\n      }, this.options.throttleDelay)\n    );\n\n    // Observe the tables present on the page\n    tables.forEach((table) => {\n      checkForOverflow.observe(table);\n    });\n  };\n\n  // Utility method to extend defaults with options\n  const extendDefaults = (source, properties) => {\n    let property;\n    for (property in properties) {\n      if (properties.hasOwnProperty(property)) {\n        source[property] = properties[property];\n      }\n    }\n    return source;\n  };\n\n  // Utility to throttle callbacks\n  const throttle = (callback, delay) => {\n    let timer = 0;\n    return function (...args) {\n      clearTimeout(timer);\n      timer = setTimeout(() => callback.apply(this, args), delay);\n    };\n  };\n})();\n\n\n//# sourceURL=webpack://table-scroll-shadow/./src/table-scroll-shadow.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/table-scroll-shadow.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/table-scroll-shadow.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;